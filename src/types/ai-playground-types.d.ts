/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api-schema/": {
    /**
     * @description OpenApi3 schema for this API. Format can be selected via content negotiation.
     *
     * - YAML: application/vnd.oai.openapi
     * - JSON: application/vnd.oai.openapi+json
     */
    get: operations["api_schema_retrieve"];
  };
  "/api/aipe/contexts/{id}/": {
    /** @description Concrete view for retrieving, updating or deleting a context instance. */
    get: operations["api_aipe_context_retrieve"];
    /** @description Concrete view for retrieving, updating or deleting a context instance. */
    put: operations["api_aipe_context_update"];
    /** @description Concrete view for retrieving, updating or deleting a context instance. */
    delete: operations["api_aipe_context_destroy"];
    /** @description Concrete view for retrieving, updating or deleting a context instance. */
    patch: operations["api_aipe_context_partial_update"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    AssistantMessage: {
      /** Format: uuid */
      id: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      item_role?: components["schemas"]["ItemRoleEnum"];
      name?: string | null;
      text_content?: string | null;
      token_count?: number;
      finish_reason?: components["schemas"]["FinishReasonEnum"];
      tool_call_requests: readonly components["schemas"]["ToolCallRequest"][];
    };
    AssistantMessageTyped: {
      item_type: string;
    } & components["schemas"]["AssistantMessage"];
    ChatCallChain: {
      /** Format: uuid */
      id: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: uuid */
      span: string;
      title?: string;
      items: components["schemas"]["ChatItemMultiType"][];
    };
    ChatItemMultiType: components["schemas"]["UserMessageTyped"] | components["schemas"]["SystemMessageTyped"] | components["schemas"]["AssistantMessageTyped"] | components["schemas"]["ToolMessageTyped"];
    ChatSpan: {
      /** Format: uuid */
      id: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      slug?: string;
      title?: string | null;
      /** Format: uuid */
      replaced_by?: string | null;
      call_chains: components["schemas"]["ChatCallChain"][];
    };
    ContextAssumption: {
      /** Format: uuid */
      id: string;
      index?: number;
      assumption: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    ContextFact: {
      /** Format: uuid */
      id: string;
      index?: number;
      fact: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    ContextGoal: {
      /** Format: uuid */
      id: string;
      index?: number;
      goal: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    ContextGuideline: {
      /** Format: uuid */
      id: string;
      index?: number;
      guideline: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    ConversationContext: {
      /** Format: uuid */
      id: string;
      goals: components["schemas"]["ContextGoal"][];
      guidelines: components["schemas"]["ContextGuideline"][];
      facts: components["schemas"]["ContextFact"][];
      assumptions: components["schemas"]["ContextAssumption"][];
      spans: components["schemas"]["ChatSpan"][];
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      main_goal?: string | null;
    };
    /**
     * @description * `stop` - Stop
     * * `length` - Length
     * * `tool_calls` - Tool calls
     * * `content_filter` - Content filter
     * * `function_call` - Function call
     * @enum {string}
     */
    FinishReasonEnum: "stop" | "length" | "tool_calls" | "content_filter" | "function_call";
    /**
     * @description * `guardrails` - Guardrails
     * * `instructions` - Instructions
     * * `conversation` - Conversation
     * @enum {string}
     */
    ItemRoleEnum: "guardrails" | "instructions" | "conversation";
    PatchedConversationContext: {
      /** Format: uuid */
      id?: string;
      goals?: components["schemas"]["ContextGoal"][];
      guidelines?: components["schemas"]["ContextGuideline"][];
      facts?: components["schemas"]["ContextFact"][];
      assumptions?: components["schemas"]["ContextAssumption"][];
      spans?: components["schemas"]["ChatSpan"][];
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      main_goal?: string | null;
    };
    /**
     * @description * `created` - Created
     * * `pending` - Pending
     * * `success` - Success
     * * `error` - Error
     * @enum {string}
     */
    StatusEnum: "created" | "pending" | "success" | "error";
    SystemMessage: {
      /** Format: uuid */
      id: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      item_role?: components["schemas"]["ItemRoleEnum"];
      name?: string | null;
      text_content?: string | null;
      token_count?: number;
    };
    SystemMessageTyped: {
      item_type: string;
    } & components["schemas"]["SystemMessage"];
    ToolCallRequest: {
      /** Format: uuid */
      id: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      call_id: string;
      tool_name: string;
      tool_arguments_raw?: string | null;
      status?: components["schemas"]["StatusEnum"];
      computed_result?: string | null;
    };
    ToolMessage: {
      /** Format: uuid */
      id: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      item_role?: components["schemas"]["ItemRoleEnum"];
      call_request: components["schemas"]["ToolCallRequest"];
      token_count?: number;
    };
    ToolMessageTyped: {
      item_type: string;
    } & components["schemas"]["ToolMessage"];
    UserMessage: {
      /** Format: uuid */
      id: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      item_role?: components["schemas"]["ItemRoleEnum"];
      name?: string | null;
      text_content?: string | null;
      token_count?: number;
    };
    UserMessageTyped: {
      item_type: string;
    } & components["schemas"]["UserMessage"];
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * @description OpenApi3 schema for this API. Format can be selected via content negotiation.
   *
   * - YAML: application/vnd.oai.openapi
   * - JSON: application/vnd.oai.openapi+json
   */
  api_schema_retrieve: {
    parameters: {
      query?: {
        format?: "json" | "yaml";
        lang?: "af" | "ar" | "ar-dz" | "ast" | "az" | "be" | "bg" | "bn" | "br" | "bs" | "ca" | "ckb" | "cs" | "cy" | "da" | "de" | "dsb" | "el" | "en" | "en-au" | "en-gb" | "eo" | "es" | "es-ar" | "es-co" | "es-mx" | "es-ni" | "es-ve" | "et" | "eu" | "fa" | "fi" | "fr" | "fy" | "ga" | "gd" | "gl" | "he" | "hi" | "hr" | "hsb" | "hu" | "hy" | "ia" | "id" | "ig" | "io" | "is" | "it" | "ja" | "ka" | "kab" | "kk" | "km" | "kn" | "ko" | "ky" | "lb" | "lt" | "lv" | "mk" | "ml" | "mn" | "mr" | "ms" | "my" | "nb" | "ne" | "nl" | "nn" | "os" | "pa" | "pl" | "pt" | "pt-br" | "ro" | "ru" | "sk" | "sl" | "sq" | "sr" | "sr-latn" | "sv" | "sw" | "ta" | "te" | "tg" | "th" | "tk" | "tr" | "tt" | "udm" | "uk" | "ur" | "uz" | "vi" | "zh-hans" | "zh-hant";
      };
    };
    responses: {
      200: {
        content: {
          "application/vnd.oai.openapi": {
            [key: string]: unknown;
          };
          "application/yaml": {
            [key: string]: unknown;
          };
          "application/vnd.oai.openapi+json": {
            [key: string]: unknown;
          };
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
    };
  };
  /** @description Concrete view for retrieving, updating or deleting a context instance. */
  api_aipe_context_retrieve: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ConversationContext"];
        };
      };
    };
  };
  /** @description Concrete view for retrieving, updating or deleting a context instance. */
  api_aipe_context_update: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConversationContext"];
        "application/x-www-form-urlencoded": components["schemas"]["ConversationContext"];
        "multipart/form-data": components["schemas"]["ConversationContext"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ConversationContext"];
        };
      };
    };
  };
  /** @description Concrete view for retrieving, updating or deleting a context instance. */
  api_aipe_context_destroy: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /** @description Concrete view for retrieving, updating or deleting a context instance. */
  api_aipe_context_partial_update: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedConversationContext"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedConversationContext"];
        "multipart/form-data": components["schemas"]["PatchedConversationContext"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ConversationContext"];
        };
      };
    };
  };
}
